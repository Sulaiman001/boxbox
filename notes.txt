TODO : maxScale

viewport.originalViewports[]
viewport.originalViewport = this.originalViewports[0]
viewport.lastViewport = this.originalViewports[this.originalViewports.length-1]

prepareTouchPanDraggingInfos()
    originalViewport
    viewports[]

    originalViewport
    lastViewport

private

originalViewport = {
    viewport,
    pointerPos
}
viewports = [
    {
        viewport, //when created
        pointerPos //when created
    }
}

exposed
{
    originalViewport : originalViewport.viewport,
    viewport : viewports[viewports.length-1]
}
preciselly
{
    originalViewport : originalViewport.viewport,
    viewport : {
        x : viewports[viewports.length-1].viewport.x - (pointerPos.x - viewports[viewports.length-1].pointerPos.x)*multiplier ),
        y : viewports[viewports.length-1].viewport.y - (pointerPos.y - viewports[viewports.length-1].pointerPos.y)*multiplier ),
        width : viewports[viewports.length-1].viewport.width,
        height : viewports[viewports.length-1].viewport.height,
        scale : viewports[viewports.length-1].viewport.scale
    }
}

viewport = world.getCurrentViewport()
PanDraggingObject(e, overrideViewport)
- viewports = []
    - viewport
    - pointerPos
- getViewportInfos(e,mode) don't bother about scaling (made after)  == mergePointerPanInfos
- addViewport(e, overrideViewport)
- getLastViewport
- getOriginalViewport

-- old --
                
                /*
                 * @function mergePointerPanInfos
                 * @param {MouseEvent} | {Touch} (one specific touch)
                 * @context World
                 */
                var mergePointerPanInfos = function(originalInfos, e, mode){
                    var relativePointerPos = {
                            x : (e.offsetX || e.layerX || e.pageX) / this.scale(),
                            y : (e.offsetY || e.layerY || e.pageY) / this.scale()
                        },
                        result, multiplier;
                        switch (mode){
                            case 'touch' :
                                multiplier = this._ops._touchPan.panMultiplier;
                                break;
                            case 'mouse' :
                                multiplier = this._ops._mousePan.multiplier;
                                break;
                            default :
                                multiplier = 1;
                        }
                    result = {
                        originalViewport : {
                            x : originalInfos.originalViewport.x,
                            y : originalInfos.originalViewport.y,
                            width : originalInfos.originalViewport.width,
                            height : originalInfos.originalViewport.height,
                            scale : originalInfos.originalViewport.scale
                        },
                        viewport : {
                            x : originalInfos.originalViewport.x - (relativePointerPos.x - originalInfos.originalRelativePointerPos.x)*multiplier,
                            y : originalInfos.originalViewport.y - (relativePointerPos.y - originalInfos.originalRelativePointerPos.y)*multiplier,
                            width : originalInfos.originalViewport.width,
                            height : originalInfos.originalViewport.height,
                            scale : originalInfos.originalViewport.scale
                        }
                    };
                    return result;
                };

============

touchPan specs

touch pan / pinch
- one finger : pan
- 2 fingers : pinch
- 2+ fingers : ignored
- any 2nd finger trying to pinch on a binded element doesn't trigger the event
- 1st finger on a dragging element
    -> 2nd finger pinching (if not on a binded element)
-> 1st finger is always the reference for pan
-> distance between 1st and 2nd finger is the reference for pinch

- touch start/move/end
- every function like _touchstartHandler, _world_touchstartHandler will return true if an entity (if not in in _touchPan.excludeEntityIds) or the world (if not _touchPan.triggerWorldEvents === true) triggered an event, false if it didn't (to be sure that the touch received didn't trigger anything, so can trigger the pan or pinch)

- any of the things explained bellow don't apply if touchPan is disabled
- touchstart that didn't triggered any event handler (see before for the test) WILL
    - trigger the pan
    - set the world as panning
- if the world is panning, don't trigger any event in the entity event loops (but do trigger the events set on the world, except if _touchPan.triggerWorldEvents === false)
- if the world is panning, and touchstart is triggered AND allowPinch === true
    - don't trigger any event in the entity event loops (but do trigger the events set on the world, except if _touchPan.triggerWorldEvents === false) (same as before)
    - trigger the pinch
    - set the world as pinching
- if the world is panning and no more touches -> set world free
- if the world is pinching
    - don't trigger any event in the entity event loops (but do trigger the events set on the world, except if _touchPan.triggerWorldEvents === false) (same as before)
    - any new touchstart will be disregarded :
        - first touch = panning
        - distance between 1rst and 2nd touch = pinching
- if the world is pinching and only one touch remaining -> set world as panning
- if a ONE touch (and ONLY ONE) is already active (example one finger dragging for targgetting like angry birds) and a second touch is on the world
    = if there are ONLY 2 touches on the screen, the first one being triggering an entity event touchmove (initiated by onTouchmove or touchDraggable)
        - the original touchmove event of the 1rst touch must keep going
        - set the world to noPanPinching -> register the original touchmove event to keep track (to know which one not to disallow)
- if the world is noPanPinching
    - don't stop the event registred in noPanPinching
    - don't trigger any event in the entity event loops (but do trigger the events set on the world) (same as before)
    - any new touchstart will be disregarded :
        - first touch = let it do the event registred in noPanPinching (don't pan)
        - distance between 1rst and 2nd touch = pinching
    - release noPanPinching in those 2 cases :
        - once the noPanPinching event registred before is done
        - once the 2nd touch is released

api :

world.touchPan({
    disabled : false,
    multiplier : 1,
    excludeEntityIds : [],
    triggerWorldEvents: true,
    start: function(e,viewportInfos){},
    drag: function(e,viewportInfos){},
    stop: function(e,viewportInfos){},
    allowPinch: true
})

WORLD_PAN_NONE_STATE
WORLD_PAN_PANNING_STATE
WORLD_PAN_PINCHING_STATE
WORLD_PAN_NOPANPINCHING_STATE

world._touchPanState = false / "panning" / "pinching" / "noPanPinching"
world.isTouchPanning()
world.isTouchPinching()
world.isTouchNoPanPinching()
world.setTouchPanState(state)

world._touchPanStartDrag
world._touchPanDragging : {
    originalViewport
    
}

restrictStage -> rename to boundaries - DONE
cache _hasBoundaries -> DONE
world.viewport.getWindowInfosCenterTo(x,y) -> DONE
world.viewport.getWindowInfosScaleTo(scale) -> same as centerTo with preventLoop and a new viewport
world.viewport.centerTo(x,y,) -> DONE
------------------------------------------------------------------------------------------------------------------------------

TODO

//later
- world.createBoundaryZone(x1,y1,x2,y2)
- world.destroyBoundaryZone(boundaryZone) -> unbinds any entity binded to this zone
- entity.bindBoundaryZone(boundaryZone, callback) -> execute callback when entity jumps out
- entity.unBindBoundaryZone(boundaryZone)
- world._boundaryZones = {}
- by default, world.restrictStage creates a "world" boundary zone
- entity.onEnterWorld(callback)
- entity.onOutWorld(callback)
- entity.onEnterBoundaryZone(boundaryZoneId,callback)
- entity.onOutBoundaryZone(boundaryZoneId,callback)


- special css styles (prevent text select, drag ...)
- mousePan : include all non draggable entities //done
    - excludeEntityIds : [id ...] will exclude the entities listed (possible conflicts on events)
    - start
    - drag
    - stop
- touchPan
    - excludeEntityIds : [id ...] will exclude the entities listed (possible conflicts on events)
    - start
    - drag
    - stop
    - allowPinch = on a touchmove, when touches.length > 2 && none of touchInfos contains an entity
callback infos : viewportInfos :
- originalViewport
- viewport

- mouseDraggable/touchDraggable : special joints (not only mouseJoint) - good thing todo ?
- delete destroyed entity handlers
- optimize the for loops

- draggable : releaseDrag -> release allMouseJoints

- world._getDebugDraw() -> returns a new b2DebugDraw() with the new scale

//specific excludeEntityId for draggable entitys ? -> no, pick in the list of draggables, use :
_mouseDraggableEntityIds    //done
_touchDraggableEntityIds    //done

-> update these at .mouseDraggable + touchDraggable @TODO -> check this one 

world.restrictStage({maxWindow,maxScale}) @optional params -> insert it in createWorld
    - top
    - right
    - bottom
    - left
    - maxScale
viewport.check(viewport) return boolean
viewport.resolve(viewport) return viewport


- mousewheelZoom documentation

- tell the user mousePan, mousewheelZoom aren't compatible with debugDraw (as any call to .camera()) (what about scale() ?)

world.createEntity :
    - init a function that is run when the entity is created //already there
------------------------------------------------------------------------------------------------------------------------------

DONE

- make an accurate .find(x,y) method => world.getEntityByPosition()
- world
    - onTouchstart(e)
    - onTouchmove(e)
    - onTouchend(e)
    - onTouchcancel(e) -> canceled
- touchOnly
- mouseOnly
-fix the creation of polygon : in the extends method, the length of the array in erased ...

- world.getWorldCurrentWindowInfos() -> x,y,width,height

- world.focusAll() - recadrer sur tous les objets présents dans le world
- refactor : use getEntityFromMouse and remove checkPosition from the for loops in the top level handlers//done

- mouseDraggable -> 
     - enable -> add entityId to world._mouseDraggableEntityIds         //done
     - disable -> remove entityId from world._mouseDraggableEntityIds   //done
- touchDraggable -> 
     - enable -> add entityId to world.touchDraggableEntityIds          //done
     - disable -> remove entityId from world.touchDraggableEntityIds    //done

world._addMousePanExcludeEnityId(id)        //done
world._removeMousePanExcludeEnityId(id)     //done
world._addTouchPanExcludeEnityId(id)        //done
world._removeTouchPanExcludeEnityId(id)     //done

- mouseWheelZoom
- onMouseWheel

---- DONE --- touchDraggable :

touchDraggable
- options :
    - regularDrag
        - maxTouches
           - allowPinch (later)
    - eventDrag @todo
        - maxTouches
           - allowPinch (later)
    - noMove
    - noRotate
- events :
    - start : function(e,[touchDragInfos, ...],touchIndex)//triggered on touchmove (on the first touch ON the entity)
    - drag : function(e,[touchDragInfos, ...])//triggered on touchmove (on any touch joined to the entity)
    - stop : function(e,[touchDragInfos, ...],touchIndex)//triggered on touchend (on the last touch joined to the entity)
    - touchadd : function(e,[touchDragInfos, ...],touchIndex)//triggered on touchstart (on any touch joined to the entity)
    - touchremove : function(e,[touchDragInfos, ...],touchIndex)//triggered on touchend (on any touch joined to the entity)
 
    queue the drag events so that they will be fired only once per touchmove event

 touchDraggableInfos =
    - touchIdentifier
    - originalPosition = {x,y}
    - position = {x,y}

world._touchDraggingEntityIds[]
entity._touchMoveJoints[touchIdentifier] = {joint,originalPosition}